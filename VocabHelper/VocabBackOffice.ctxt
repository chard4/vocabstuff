#BlueJ class context
comment0.params=newFileName
comment0.target=VocabBackOffice(java.lang.String)
comment0.text=\n\ Creates\ a\ VocabBackOffice\ \:)\n\ \n\ @param\ newFileName\ the\ file\ name\ that\ you\ want\n\ \ \ \ \ \ \ \ to\ start\ out\ with\n
comment1.params=
comment1.target=java.util.ArrayList\ getWordsList()
comment1.text=\n\ Gets\ the\ words\ list.\n\ Note\ that\ if\ using\ the\ missed\ words\ lists\ for\ testing,\n\ this\ will\ return\ those\ missed\ words,\ not\ the\ ones\n\ that\ you\ missed\ while\ testing\ the\ missed\ words\ (awk\ wording...)\n\ \n\ @return\ an\ ArrayList\ of\ all\ the\ words\n
comment10.params=
comment10.target=int\ getFileLength()
comment10.text=\n\ Gets\ the\ file\ length\ of\ the\ current\ chapter\ file.\n\ \n\ @throws\ IOException\ if\ the\ current\ file\ is\ invalid\n
comment11.params=
comment11.target=void\ getWordsAndClues()
comment11.text=\n\ Sets\ up\ the\ word\ and\ clue\ arrays.\n\ \n\ @throws\ IOException\ if\ the\ current\ file\ is\ invalid\n
comment12.params=fileName
comment12.target=void\ sendMissedToFile(java.lang.String)
comment12.text=\n\ Creates\ a\ new\ file\ for\ the\ missed\ words.\n\ \n\ @param\ fileName\ the\ name\ of\ the\ file\ you're\ creating\n
comment13.params=fileName
comment13.target=void\ createNewFile(java.lang.String)
comment13.text=\n\ If\ the\ user\ wants\ to\ create\ a\ new\ file\ within\n\ the\ program,\ then\ use\ this\ method.\n\ Another\ method\ will\ be\ used\ to\ add\ stuff\ to\ the\ selected\ file.\n\ \n\ @param\ fileName\ the\ name\ of\ the\ file\ that\ you\ want\ to\ create\n
comment14.params=word\ fileName\ type
comment14.target=void\ addWordToFile(java.lang.String,\ java.lang.String,\ boolean)
comment14.text=\n\ This\ adds\ a\ specified\ word\ and\ definition\n\ to\ the\ specified\ file.\n\ \n\ @param\ word\ the\ word\ you're\ adding\n\ @param\ fileName\ the\ name\ of\ the\ file\ you're\ adding\ to\n\ @param\ type\ whether\ the\ word\ you're\ adding\ \n\ \ \ \ \ \ \ \ is\ a\ definition\ (false)\ or\ the\ required\ input\ (true)\n
comment15.params=
comment15.target=java.lang.String[]\ pickWordAndClue()
comment15.text=\n\ Randomly\ selects\ a\ word\ and\ the\ corresponding\ clue\n\ from\ the\ String[]s.\ \n\ \n\ @return\ a\ String[]\ of\ length\ 2\ holding\ the\ word\ and\ clue\n\ \ \ \ \ \ \ \ \ that\ was\ picked\n
comment16.params=
comment16.target=void\ trimDownWordsAndClues()
comment16.text=\n\ Gets\ rid\ of\ words\ that\ were\ already\ used.\n\ This\ is\ to\ make\ sure\ that\ every\ word\ will\ be\ tested\n\ and\ also\ so\ that\ words\ don't\ randomly\ repeat.\n\ \n\ @throws\ NullPointerException\ if\ the\ words\ or\ clues\ are\ null\n
comment17.params=guess
comment17.target=boolean\ isCorrect(java.lang.String)
comment17.text=\n\ Checks\ if\ the\ user\ guessed\ the\ word\ correctly.\n\ \n\ @return\ true\ if\ the\ user\ did;\ otherwise\ false.\n
comment18.params=
comment18.target=void\ clearMissed()
comment18.text=\n\ Clears\ the\ missed\ arraylists.\n\ This\ is\ only\ useful\ if\ you\ want\ to\ clear\ it\ (no\ duh)\n\ EX\:\ I'm\ done\ with\ a\ file\ (this\ means\ you\ auto-save\ a\ missed\ words\ list\ for\ it).\n\ So,\ I\ would\ want\ to\ clear\ the\ arraylists\ so\ I\ can\ have\ file-specific\ missed\ txts.\n
comment2.params=
comment2.target=java.util.ArrayList\ getCluesList()
comment2.text=\n\ Gets\ the\ clues\ list.\n\ Note\ that\ if\ using\ the\ missed\ words\ lists\ for\ testing,\n\ this\ will\ return\ those\ missed\ clues,\ not\ the\ ones\n\ that\ you\ missed\ while\ testing\ the\ missed\ words\ (awk\ wording...)\n\ \n\ @return\ an\ ArrayList\ of\ all\ the\ clues\n
comment3.params=
comment3.target=java.util.ArrayList\ getMissedWordsList()
comment3.text=\n\ Gets\ the\ missed\ words\ list.\n\ Note\ that\ if\ the\ missed\ words/clues\ are\ the\n\ active\ lists,\ then\ it\ won't\ return\ the\ current\ missed\ words;\n\ instead,\ it\ will\ return\ the\ missed\ words\ from\ that\ testing.\n\ \n\ @return\ an\ array\ of\ all\ the\ missed\ words\n
comment4.params=
comment4.target=java.util.ArrayList\ getMissedCluesList()
comment4.text=\n\ Gets\ the\ missed\ clues\ list.\n\ Note\ that\ if\ the\ missed\ words/clues\ are\ the\n\ active\ lists,\ then\ it\ won't\ return\ the\ current\ missed\ clues;\n\ instead,\ it\ will\ return\ the\ missed\ clues\ from\ that\ testing.\n\ \n\ @return\ an\ array\ of\ all\ the\ corresponding\ clues\n\ \ \ \ \ \ \ \ \ to\ the\ missed\ words\n
comment5.params=
comment5.target=java.lang.String\ getFile()
comment5.text=\n\ Gets\ the\ current\ file\ name.\n\ \n\ @return\ the\ name\ of\ the\ current\ file\n
comment6.params=word\ clue
comment6.target=void\ addWordToMissed(java.lang.String,\ java.lang.String)
comment6.text=\n\ Adds\ a\ missed\ word\ to\ the\ missedWordsList\ arraylist.\n\ \n\ Precondition\:\ \ \ \ the\ word\ and\ clue\ correspond\ correctly\n\ \n\ @param\ word\ the\ word\ you're\ adding\n\ @param\ clue\ the\ clue\ you're\ adding\n
comment7.params=word\ clue
comment7.target=void\ removeWordAndClue(java.lang.String,\ java.lang.String)
comment7.text=\n\ Removes\ the\ word\ and\ clue\ from\ the\ arraylists.\n\ \n\ Precondition\:\ \ \ \ the\ word\ and\ clue\ correspond\ correctly\n\ \n\ @param\ word\ the\ word\ you're\ removing\n\ @param\ clue\ the\ clue\ you're\ removing\n
comment8.params=
comment8.target=void\ useMissedLists()
comment8.text=\n\ A\ method\ to\ allow\ the\ user\ to\ test\ the\ missed\ words.\n
comment9.params=newFile
comment9.target=void\ setStage(java.lang.String)
comment9.text=\n\ Sets\ the\ file\ to\ a\ new\ one\ and\ updates\ the\ word\ list\ and\ clue\ list.\n\ \n\ @param\ newFile\ the\ name\ of\ the\ new\ file\n
numComments=19
